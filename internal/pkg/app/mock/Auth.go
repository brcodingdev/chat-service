// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	response "github.com/brcodingdev/chat-service/internal/port/http/response"
	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Login provides a mock function with given fields: userName, password
func (_m *Auth) Login(userName string, password string) (response.LoginResponse, error) {
	ret := _m.Called(userName, password)

	var r0 response.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (response.LoginResponse, error)); ok {
		return rf(userName, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) response.LoginResponse); ok {
		r0 = rf(userName, password)
	} else {
		r0 = ret.Get(0).(response.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: email, userName, password
func (_m *Auth) SignUp(email string, userName string, password string) (response.SignUpResponse, error) {
	ret := _m.Called(email, userName, password)

	var r0 response.SignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (response.SignUpResponse, error)); ok {
		return rf(email, userName, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) response.SignUpResponse); ok {
		r0 = rf(email, userName, password)
	} else {
		r0 = ret.Get(0).(response.SignUpResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
