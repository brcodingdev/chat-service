// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	response "github.com/brcodingdev/chat-service/internal/port/http/response"
	mock "github.com/stretchr/testify/mock"
)

// Chat is an autogenerated mock type for the Chat type
type Chat struct {
	mock.Mock
}

// CreateChatMessage provides a mock function with given fields: msg, roomId, userId
func (_m *Chat) CreateChatMessage(msg string, roomId uint, userId uint) bool {
	ret := _m.Called(msg, roomId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uint, uint) bool); ok {
		r0 = rf(msg, roomId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateChatRoom provides a mock function with given fields: name
func (_m *Chat) CreateChatRoom(name string) (response.ChatRoomResponse, error) {
	ret := _m.Called(name)

	var r0 response.ChatRoomResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.ChatRoomResponse, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) response.ChatRoomResponse); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(response.ChatRoomResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChatRoomMessages provides a mock function with given fields: roomId
func (_m *Chat) ListChatRoomMessages(roomId uint) (response.ChatRoomMessagesResponse, error) {
	ret := _m.Called(roomId)

	var r0 response.ChatRoomMessagesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (response.ChatRoomMessagesResponse, error)); ok {
		return rf(roomId)
	}
	if rf, ok := ret.Get(0).(func(uint) response.ChatRoomMessagesResponse); ok {
		r0 = rf(roomId)
	} else {
		r0 = ret.Get(0).(response.ChatRoomMessagesResponse)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChatRooms provides a mock function with given fields:
func (_m *Chat) ListChatRooms() (response.ChatRoomsResponse, error) {
	ret := _m.Called()

	var r0 response.ChatRoomsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (response.ChatRoomsResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() response.ChatRoomsResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(response.ChatRoomsResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChat creates a new instance of Chat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chat {
	mock := &Chat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
